<%- include('../partials/header') %>
<%- include('../partials/headercopy') %>


    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }
        h1 {
            text-align: center;
            margin-top: 20px;
        }
        table {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            background-color: #fff;
        }
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        td:last-child {
            text-align: center;
        }
        a {
            color: #007bff;
            text-decoration: none;
            transition: color 0.3s ease;
        }
        a:hover {
            color: #0056b3;
        }
    </style>
<body>
    <h1>Order View</h1>
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Order Date</th>
                <th>Image</th>
                <th>Order Status</th>
                <th>Payment Status</th>
                <th>Payment Method</th>
                <th>Product Price</th>
                <th>Quantity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% if (order.items && order.items.length > 0) { %>
                <% order.items.forEach(item => { %>
                    <tr>
                        <td><%= new Date(order.orderDate).toDateString() %></td>
                        <td><img src="/Productimages/<%= item.media[0] %>" alt="Product Image" class="img-thumbnail" style="width: 100px; height: 120px;"></td>
                        <td data-input-id="<%= item._id %>"><%= item.status %></td>
                        <td><%= order.paymentStatus %></td>
                        <td><%= order.paymentMethod %></td>
                        <% 
                            // Calculate the effective price of the product considering discounts
                            let effectivePrice = item.productPrice;
                            if (item.categoryDiscountPrice && item.categoryDiscountPrice > 0) {
                                effectivePrice = item.categoryDiscountPrice;
                            } else if (item.discountPrice && item.discountPrice > 0) {
                                effectivePrice = item.discountPrice;
                            }
                        %>
                        <td>₹<%= effectivePrice.toFixed(2) %></td>
                        <td><%= item.quantity %></td>
                        <td>
                            <% if (item.status === "Delivered" && item.status !== "Cancelled" && item.status !== "Returned") { %>
                                <button class="btn btn-warning btn-sm" onclick="showReturnConfirmation('<%= order._id %>', '<%= item._id %>')" data-input-id="<%= item._id %>">Return</button>
                            <% } %>
                            <% if (item.status !== "Cancelled" && item.status !== "Delivered" && item.status !== "Returned") { %>
                                <% if (item.status === "Pending" || item.status === "Confirmed") { %>
                                    <button class="btn btn-danger btn-sm" onclick="showCancelConfirmation('<%= order._id %>', '<%= item._id %>')" data-input-id="<%= item._id %>">Cancel</button>
                                <% } else { %>
                                    -
                                <% } %>
                            <% } else if (item.status === "Cancelled") { %>
                                <span class="text-danger">Cancelled</span>
                            <% } else if (item.status === "Returned") { %>
                                <span class="text-warning">Returned</span>
                            <% } %>
                        </td>
                    </tr>
                <% }); %>
            <% } %>
        </tbody>
    </table>
    
    <table id="summary-table" style="margin-top: 20px;">
        <tbody>
            <% if(order.couponAmount > 0) { %>
                <tr>
                    <th>Coupon Amount</th>
                    <td id="couponAmount">₹<%= order.couponAmount.toFixed(2) %></td>
                </tr>
            <% } %>
            <tr>
                <th>Grand Total</th>
                <td id="grandTotal">₹<%= order.billTotal.toFixed(2) %></td>
            </tr>
            <tr>
                <th>Shipping Address</th>
                <td id="shippingAddress">
                    <%= order.shippingAddress.street %>,<br>
                    <%= order.shippingAddress.city %>,<br>
                    <%= order.shippingAddress.state %>,<br>
                    <%= order.shippingAddress.country %> - <%= order.shippingAddress.postalCode %>
                </td>
            </tr>
        </tbody>
    </table>
    
    <div style="text-align: center; margin-top: 20px;">
        <% if(order.paymentStatus === "Failed") { %>
            <button onclick="retryPayment('<%= order._id %>', '<%= order.billTotal %>')" data-input-id="<%= order._id %>" style="padding: 10px 20px; background-color: #557775; color: white; border: none; border-radius: 5px; cursor: pointer;">Retry</button>
        <% } else if(order.orderStatus === 'Partially Delivered' ||order.orderStatus === "Delivered") { %>
            <button onclick="downloadInvoice('<%= order._id %>')" style="padding: 10px 20px; background-color: #557775; color: white; border: none; border-radius: 5px; cursor: pointer;">Download Invoice</button>
        <% } %>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    
    <script>
        function disableButton(buttonId) {
            const button = document.getElementById(buttonId);
            if (button) {
                button.disabled = true;
            }
        }
    
        function showCancelConfirmation(orderId, itemId) {
            Swal.fire({
                title: 'Cancel Order',
                html: 'Are you sure you want to cancel this order?<br><input type="text" id="cancellationReason" class="swal2-input" placeholder="Enter cancellation reason">',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (result.isConfirmed) {
                    const cancellationReason = document.getElementById('cancellationReason').value;
                    disableButton('cancel-' + itemId);
                    cancelOrder(orderId, itemId, cancellationReason);
                }
            });
        }
    
        function showReturnConfirmation(orderId, itemId) {
            Swal.fire({
                title: 'Return Order',
                html: 'Are you sure you want to return this order?<br><input type="text" id="returnReason" class="swal2-input" placeholder="Enter reason for returning">',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, return it!',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (result.isConfirmed) {
                    const returnReason = document.getElementById('returnReason').value;
                    disableButton('return-' + itemId);
                    returnOrder(orderId, itemId, returnReason);
                }
            });
        }
    
        async function cancelOrder(orderId, itemId, cancellationReason) {
            try {
                const response = await fetch('/cancelorder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId, itemId, cancellationReason })
                });
                const data = await response.json();
                if (response.ok) {
                    Swal.fire('Order Cancelled', data.message, 'success');
    
                    document.querySelector(`[data-input-id="${itemId}"]`).textContent = 'Cancelled';
                    const cancelButton = document.querySelector(`button[data-input-id="${itemId}"]`);
                    cancelButton.innerHTML = 'Order Cancelled';
                    cancelButton.disabled = true;
                    location.reload();
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire('Error', 'An error occurred while cancelling the order', 'error');
            }
        }
    
        async function returnOrder(orderId, itemId, returnReason) {
            try {
                const response = await fetch('/returnorder', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId, itemId, returnReason })
                });
                const data = await response.json();
                if (response.ok) {
                    Swal.fire('Order Returned', data.message, 'success');
    
                    document.querySelector(`[data-input-id="${itemId}"]`).textContent = 'Returned';
                    const returnButton = document.querySelector(`button[data-input-id="${itemId}"]`);
                    returnButton.innerHTML = 'Order Returned';
                    returnButton.disabled = true;
                    location.reload();
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire('Error', 'An error occurred while returning the order', 'error');
            }
        }
    
        async function downloadInvoice(orderId) {
            try {
                const response = await fetch(`/downloadInvoice?orderId=${orderId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
    
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = `invoice_${orderId}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                } else {
                    const data = await response.json();
                    Swal.fire('Error', data.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire('Error', 'An error occurred while downloading the invoice', 'error');
            }
        }
    

function retryPayment(orderId, totalAmount) {
    console.log("billtotal", totalAmount);
    
    fetch("/retryOrder", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            orderId: orderId,
            totalAmount: totalAmount
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("success");
            const options = {
                    key: data.key_id ,
                    amount: data.amount,
                    currency: "INR",
                    name: "HPHONE",
                    description: data.description,
                    order_id: data.order_id,
                handler: function (response) {
                    console.log(response);
                    retryOrderPlace(orderId, totalAmount, "Success");
                },
                prefill: {
                    contact: data.contact,
                    name: data.name,
                    email: data.email
                },
                notes: {
                    description: data.description
                },
                theme: {
                  color: "#F37254"
                }
            };

            const razorpayObject = new Razorpay(options);
            console.log(razorpayObject);
            razorpayObject.open();

            razorpayObject.on('payment.failed', function (response) {
                console.error(response.error);
                retryOrderPlace(orderId, totalAmount, "Failed");
            });
        } else {
            Swal.fire({
                icon: 'warning',
                title: 'Order Placement Failed',
                text: data.msg
            });
        }
    })
    .catch(error => {
        console.error('Error placing order:', error);
    });
}

function retryOrderPlace(orderId, totalAmount, status) {
    fetch(`/retryOnlineOrder`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            orderId,
            totalAmount,
            status
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (data.message === "Order placed successfully") {
                Swal.fire({
                    icon: "success",
                    title: 'Order Confirmed',
                    text: "Your payment was successful and the order has been placed.",
                    confirmButtonText: "OK"
                }).then((result) => {
                    if (result.isConfirmed) {
                        location.reload();
                    }
                });
            } else if (data.message === "Payment failed retry") {
                Swal.fire({
                    icon: "error",
                    title: 'Payment Failed',
                    text: data.message,
                    confirmButtonText: "Ok"
                });
            }
        } else {
            Swal.fire({
                icon: 'warning',
                title: 'Order Placement Failed',
                text: data.message
            });
        }
    })
    .catch(error => {
        console.error('Error confirming order:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Placement Failed',
            text: 'There was an error confirming your order. Please try again.'
        });
    });
}

    </script>
    





<%- include('../partials/footercopy') %>
<%- include('../partials/footer') %>