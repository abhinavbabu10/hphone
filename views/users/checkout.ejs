<%- include('../partials/header') %>
<%- include('../partials/headercopy') %>

<style>
    .error-message {
      color: #dc3545;
      font-size: 14px; 
      margin-top: 5px; 
    }
    </style>

<!-- 
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addAddressModalLabel">Add Address</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addAddressForm">
            <div class="mb-3">
              <label for="addHouseName" class="form-label">House Name</label>
              <input type="text" class="form-control" id="addHouseName">
              <div id="houseNameError" class="error-message text-danger"></div>
            </div>
            <div class="mb-3">
              <label for="addStreet" class="form-label">Street</label>
              <input type="text" class="form-control" id="addStreet">
              <div id="streetError" class="error-message text-danger"></div>
            </div>
            <div class="mb-3">
              <label for="addCity" class="form-label">City</label>
              <input type="text" class="form-control" id="addCity">
              <div id="cityError" class="error-message text-danger"></div>
            </div>
            <div class="mb-3">
              <label for="addState" class="form-label">State</label>
              <input type="text" class="form-control" id="addState">
              <div id="stateError" class="error-message text-danger"></div>
            </div>
            <div class="mb-3">
              <label for="addCountry" class="form-label">Country</label>
              <input type="text" class="form-control" id="addCountry">
              <div id="countryError" class="error-message text-danger"></div>
            </div>
            <div class="mb-3">
              <label for="addPostalCode" class="form-label">Postal Code</label>
              <input type="text" class="form-control" id="addPostalCode">
              <div id="postalCodeError" class="error-message text-danger"></div>
            </div>
            <div class="mb-3">
              <label for="addPhoneNumber" class="form-label">Phone Number</label>
              <input type="text" class="form-control" id="addPhoneNumber">
              <div id="phoneNoError" class="error-message text-danger"></div>
            </div>
            <div class="mb-3">
              <label for="addType" class="form-label">Address Type</label>
              <select class="form-control" id="addType">
                <option value="">Select Address Type</option>
                <option value="Office">Office</option>
                <option value="Home">Home</option>
                <option value="Other">Other</option>
              </select>
              <div id="addressTypeError" class="error-message text-danger"></div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="saveNewAddress()">Add Address</button>
        </div>
      </div>
    </div>
  </div> -->


  <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel">Add Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addAddressForm">
                    <div class="mb-3">
                        <label for="addHouseName" class="form-label">House Name</label>
                        <input type="text" class="form-control" id="addHouseName">
                        <div id="houseNameError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="addStreet" class="form-label">Street</label>
                        <input type="text" class="form-control" id="addStreet">
                        <div id="streetError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="addCity" class="form-label">City</label>
                        <input type="text" class="form-control" id="addCity">
                        <div id="cityError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="addState" class="form-label">State</label>
                        <input type="text" class="form-control" id="addState">
                        <div id="stateError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="addCountry" class="form-label">Country</label>
                        <input type="text" class="form-control" id="addCountry">
                        <div id="countryError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="addPostalCode" class="form-label">Postal Code</label>
                        <input type="text" class="form-control" id="addPostalCode">
                        <div id="postalCodeError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="addPhoneNumber" class="form-label">Phone Number</label>
                        <input type="text" class="form-control" id="addPhoneNumber">
                        <div id="phoneNoError" class="error-message text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="addType" class="form-label">Address Type</label>
                        <select class="form-control" id="addType">
                            <option value="">Select Address Type</option>
                            <option value="Office">Office</option>
                            <option value="Home">Home</option>
                            <option value="Other">Other</option>
                        </select>
                        <div id="addressTypeError" class="error-message text-danger"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="validateAddress()">Add Address</button>
            </div>
        </div>
    </div>
</div>


  <!-- applycouponmodal -->
<div class="modal fade" id="applyCouponModal" tabindex="-1" aria-labelledby="applyCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="applyCouponModalLabel">Apply Coupon</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3"></div>
                <div class="available-coupons">
                    <h6>Available Coupons:</h6>
                    <ul class="list-group">
                        <% coupons.forEach(coupon => { %>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="coupon" id="<%= coupon.couponcode %>" value="<%= coupon.couponcode %>" <%= coupon.usedBy.includes(user._id) ? 'disabled' : '' %>>
                                <label class="form-check-label" for="<%= coupon.couponcode %>">
                                    <%= coupon.couponname %> - Code: <%= coupon.couponcode %> - Minimum amount: <%= coupon.minimumamount %> - Maximum discount amount: <%= coupon.maximumDiscountAmount %>
                                </label>
                                <% if (coupon.usedBy.includes(user._id)) { %>
                                    <span class="badge bg-warning">Used</span>
                                <% } %>
                            </div>
                        </li>
                        <% }); %>
                    </ul>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="applyCouponBtn" type="button" class="btn btn-primary" <%= coupons.some(coupon => coupon.usedBy.includes(user._id)) ? 'disabled' : '' %>>Apply Coupon</button>
                <button id="removeCouponBtn" type="button" class="btn btn-danger">Remove Coupon</button>
            </div>
        </div>
    </div>
</div>

 <main class="main">
    <div class="page-header breadcrumb-wrap">
        <div class="container">
            <div class="breadcrumb">
                <a href="index.html" rel="nofollow">Home</a>
                <span></span> Shop
                <span></span> Checkout
            </div>
        </div>
    </div>
    <section class="mt-50 mb-50">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 mb-sm-15">  
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-25">
                        <h4>Address Details</h4>
                    </div>
                    <button type="button" id="address" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAddressModal">Add Address</button>
                    <% if (user && user.address && user.address.length > 0) { %>
                        <% user.address.forEach(function(add) { %>
                            <div class="col-lg-4 mt-15">
                                <div class="card mb-3 mb-lg-0">
                                    <div class="card-header">
                                        <h5 class="mb-0"><%= add.type %> Address</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="address" value="<%= add._id %>" id="address_<%= add._id %>">
                                            <label class="form-check-label" for="address_<%= add._id %>">
                                                <address>
                                                    <%= add.houseName %><br>
                                                    <%= add.street %>,<br>
                                                    <%= add.city %>, <%= add.postalCode %><br>
                                                    <%= add.phoneNumber %><br>
                                                    <%= add.state %>
                                                </address>
                                                <p><%= add.country %></p>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <p>No addresses found.</p>
                    <% } %>
                </div>
               
                    <div class="col-md-6">
                        <div class="order_review ml-15">
                            <div class="mb-20">
                                <div class="text-center">
                                <h4>Your Orders</h4>
                            </div>
                            </div>
                            <div class="table-responsive order_table text-center">
                                <table class="table mt-5">
                                    <thead>
                                        <tr>
                                            <th colspan="2">Product</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% if (cart && cart.product && cart.product.length > 0) { %>
                                            <% cart.product.forEach(item => { %>
                                                <tr>
                                                    <td class="image product-thumbnail">
                                                        <img src="/Productimages/<%= item.productId.media?.[0] || '/path/to/default/image.jpg' %>" alt="<%= item.productId.name %>">
                                                    </td>
                                                    <td>
                                                        <h5><a href="/product/<%= item.productId._id %>"><%= item.productId.name %></a></h5> 
                                                        <span class="product-qty">x <%= item.quantity %></span>
                                                    </td>
                                                    <% 
                                                        // Calculate the lowest price
                                                        const prices = [item.productId.price, item.productId.categoryDiscountPrice, item.productId.discountPrice];
                                                        const lowestPrice = Math.min(...prices.filter(price => price > 0));
                                                    %>
                                                    <td>₹<%= (lowestPrice * item.quantity).toFixed(2) %></td>
                                                </tr>
                                            <% }) %>
                                            <tr id="subtotalRow">
                                                <th>SubTotal</th>
                                                <td class="product-subtotal" colspan="2">₹<span id="subtotal"><%= cart.product.reduce((acc, item) => {
                                                    const prices = [item.productId.price, item.productId.categoryDiscountPrice, item.productId.discountPrice];
                                                    const lowestPrice = Math.min(...prices.filter(price => price > 0));
                                                    return acc + lowestPrice * item.quantity;
                                                }, 0).toFixed(2) %></span></td>
                                            </tr>
                                            <tr>
                                                <th>Shipping</th>
                                                <td colspan="2"><em>Free Shipping</em></td>
                                            </tr>
                                            <tr>
                                                <th>Total</th>
                                                <td colspan="2" class="product-subtotal">
                                                    <strong>₹<span id="totalAmount" data-original-amount="<%= cart.product.reduce((acc, item) => {
                                                        const prices = [item.productId.price, item.productId.categoryDiscountPrice, item.productId.discountPrice];
                                                        const lowestPrice = Math.min(...prices.filter(price => price > 0));
                                                        return acc + lowestPrice * item.quantity;
                                                    }, 0).toFixed(2) %>"><%= cart.product.reduce((acc, item) => {
                                                        const prices = [item.productId.price, item.productId.categoryDiscountPrice, item.productId.discountPrice];
                                                        const lowestPrice = Math.min(...prices.filter(price => price > 0));
                                                        return acc + lowestPrice * item.quantity;
                                                    }, 0).toFixed(2) %></span></strong>
                                                </td>
                                            </tr>
                                        <% } else { %>
                                            <tr>
                                                <td colspan="3">No items in the cart.</td>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                    
                                </table>
                                
                            </div>

                            <div class="coupon-section">
                                <button class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#applyCouponModal">Apply Coupon</button>
                                
                            </div>

                            <div class="bt-1 border-color-1 mt-30 mb-30"></div>
                            <div class="payment_method">
                                <div class="mb-25">
                                    <h5>Payment</h5>
                                </div>
                                <div class="payment_option">
                                    <div class="custome-radio">
                                        <input class="form-check-input" required type="radio" name="paymentMethod" value="COD" id="cod" checked>
                                        <label class="form-check-label" for="cod" data-bs-toggle="collapse" data-target="#codOption" aria-controls="codOption">Cash on Delivery</label>
                                        <div class="form-group collapse in" id="codOption">
                                            <p class="text-muted mt-5">Pay with cash upon delivery.</p>
                                        </div>
                                    </div>
                                    <div class="custome-radio">
                                        <input class="form-check-input" required type="radio" name="paymentMethod" value="Wallet" id="wallet">
                                        <label class="form-check-label" for="wallet" data-bs-toggle="collapse" data-target="#walletOption" aria-controls="walletOption">Wallet</label>
                                        <div class="form-group collapse" id="walletOption">
                                            <p class="text-muted mt-5">Pay using your wallet balance.</p>
                                        </div>
                                    </div>
                                    <div class="custome-radio">
                                        <input class="form-check-input" required type="radio" name="paymentMethod" value="Razorpay" id="razorpay">
                                        <label class="form-check-label" for="razorpay" data-bs-toggle="collapse" data-target="#razorpayOption" aria-controls="razorpayOption">Razorpay</label>
                                        <div class="form-group collapse" id="razorpayOption">
                                            <p class="text-muted mt-5">Pay securely using Razorpay.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="text-center">
                                <a href="#" id="placeOrderBtn" class="btn btn-fill-out btn-block mt-30">Place Order</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    </section>
 </main>



    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
       function validateAddress() {
    // Reset previous error messages
    document.querySelectorAll('.error-message').forEach(elem => elem.textContent = '');

    // Get input values
    const houseName = document.getElementById('addHouseName').value.trim();
    const street = document.getElementById('addStreet').value.trim();
    const city = document.getElementById('addCity').value.trim();
    const state = document.getElementById('addState').value.trim();
    const country = document.getElementById('addCountry').value.trim();
    const postalCode = document.getElementById('addPostalCode').value.trim();
    const phoneNumber = document.getElementById('addPhoneNumber').value.trim();
    const addressType = document.getElementById('addType').value;

    let isValid = true;

    // Validation for letters only (no spaces)
    const letterOnlyRegex = /^[A-Za-z]+$/;

    // Validation for house name (letters only, no spaces)
    if (!letterOnlyRegex.test(houseName)) {
        document.getElementById('houseNameError').textContent = 'House Name should contain only letters, no spaces or numbers';
        isValid = false;
    }

    // Validation for street (letters only, no spaces)
    if (!letterOnlyRegex.test(street)) {
        document.getElementById('streetError').textContent = 'Street should contain only letters, no spaces or numbers';
        isValid = false;
    }

    // Validation for city (letters only, no spaces)
    if (!letterOnlyRegex.test(city)) {
        document.getElementById('cityError').textContent = 'City should contain only letters, no spaces or numbers';
        isValid = false;
    }

    // Validation for state (letters only, no spaces)
    if (!letterOnlyRegex.test(state)) {
        document.getElementById('stateError').textContent = 'State should contain only letters, no spaces or numbers';
        isValid = false;
    }

    // Validation for country (letters only, no spaces)
    if (!letterOnlyRegex.test(country)) {
        document.getElementById('countryError').textContent = 'Country should contain only letters, no spaces or numbers';
        isValid = false;
    }

    // Validation for postal code (6 positive digits only, no spaces)
    if (!/^\d{6}$/.test(postalCode)) {
        document.getElementById('postalCodeError').textContent = 'Postal Code should contain exactly 6 digits, no spaces or negative numbers';
        isValid = false;
    }

    // Validation for phone number (10 positive digits only, no spaces)
    if (!/^\d{10}$/.test(phoneNumber)) {
        document.getElementById('phoneNoError').textContent = 'Phone Number should contain exactly 10 digits, no spaces or negative numbers';
        isValid = false;
    }

    // Validation for address type
    if (addressType === '') {
        document.getElementById('addressTypeError').textContent = 'Please select Address Type';
        isValid = false;
    }

    if (isValid) {
        // If all validations pass, proceed with saving the address
        saveNewAddress();
    }
}
        
        function saveNewAddress() {
            // Get input values
            const houseName = document.getElementById('addHouseName').value.trim();
            const street = document.getElementById('addStreet').value.trim();
            const city = document.getElementById('addCity').value.trim();
            const state = document.getElementById('addState').value.trim();
            const country = document.getElementById('addCountry').value.trim();
            const postalCode = document.getElementById('addPostalCode').value.trim();
            const phoneNumber = document.getElementById('addPhoneNumber').value.trim();
            const addressType = document.getElementById('addType').value;
        
            const data = {
                houseName,
                street,
                city,
                state,
                country,
                postalCode,
                phoneNumber,
                addressType
            };
        
            fetch('/add-addresscheckout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if(data.success){
                    Swal.fire({
                        icon: 'success',
                        title: 'Address Added Successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        $('#addAddressModal').modal('hide');
                        document.getElementById('addAddressForm').reset();
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Adding Address failed',
                        text: data.message || 'Unknown error occurred'
                    }).then(() => {
                        $('#addAddressModal').modal('hide');
                        document.getElementById('addAddressForm').reset();
                        location.reload();
                    });
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
        }
        </script>
   
    
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    // document.getElementById('placeOrderBtn').addEventListener('click', function(event) {
    //     event.preventDefault();
    //     const selectedAddressId = document.querySelector('input[name="address"]:checked').value;
    //     if (!selectedAddressId) {
    //         Swal.fire({
    //             icon: 'error',
    //             title: 'Order Placement Failed',
    //             text: 'Please select a shipping address.',
    //             confirmButtonText: 'OK'
    //         });
    //         return;
    //     }

    //     const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
    //     const totalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace('₹', ''));
    //     const subtotal = parseFloat(document.getElementById('subtotal').textContent.replace('₹', ''));


    //     if (selectedPaymentMethod === 'COD' && totalAmount > 1000) {
    //     Swal.fire({
    //         icon: 'error',
    //         title: 'Payment Method Not Available',
    //         text: 'Cash on Delivery is not available for orders over ₹1000. Please choose a different payment method.',
    //         confirmButtonText: 'OK'
    //     });
    //     return;
    // }

    //     confirmQuantity(selectedAddressId, selectedPaymentMethod, totalAmount, subtotal);
    // });

    document.getElementById('placeOrderBtn').addEventListener('click', function(event) {
    event.preventDefault();
    
    const selectedAddress = document.querySelector('input[name="address"]:checked');
    if (!selectedAddress) {
        Swal.fire({
            icon: 'error',
            title: 'Address Required',
            text: 'Please select a shipping address before placing your order.',
            confirmButtonText: 'OK'
        });
        return;
    }

    const selectedAddressId = selectedAddress.value;
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
    const totalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace('₹', ''));
    const subtotal = parseFloat(document.getElementById('subtotal').textContent.replace('₹', ''));

    if (selectedPaymentMethod === 'COD' && totalAmount > 1000) {
        Swal.fire({
            icon: 'error',
            title: 'Payment Method Not Available',
            text: 'Cash on Delivery is not available for orders over ₹1000. Please choose a different payment method.',
            confirmButtonText: 'OK'
        });
        return;
    }

    confirmQuantity(selectedAddressId, selectedPaymentMethod, totalAmount, subtotal);
});



    function updateCODAvailability() {
        const totalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace('₹', ''));
        const codRadio = document.getElementById('cod');
        const codLabel = document.querySelector('label[for="cod"]');

        if (totalAmount > 1000) {
            codRadio.disabled = true;
            codLabel.classList.add('text-muted');
            codLabel.title = 'Cash on Delivery is not available for orders over ₹1000';
        } else {
            codRadio.disabled = false;
            codLabel.classList.remove('text-muted');
            codLabel.title = '';
        }
    }

    updateCODAvailability();


    function confirmQuantity(addressId, paymentMethod, total, subtotal) {
    fetch('/confirm-quantity', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            addressId: addressId,
            paymentMethod: paymentMethod,
            total: total,
            subtotal: subtotal
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (paymentMethod === "COD") {
                placeOrder(addressId, paymentMethod, total, subtotal);
            } else if (paymentMethod === "Razorpay") {
                initiateRazorpayPayment(addressId, paymentMethod, total, subtotal);
            } else if (paymentMethod === "Wallet") {
                placeOrder(addressId, paymentMethod, total, subtotal);
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Order Placement Failed',
                text: data.message,
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Placement Failed',
            text: 'An error occurred while confirming quantities.',
            confirmButtonText: 'OK'
        });
    });
}


// function placeOrder(addressId, paymentMethod, total, subtotal) {
//     console.log(total, "totalleeeeeeeeee88888888888");
    
//     // Get coupon information
//     const couponCode = document.querySelector('input[name="coupon"]:checked')?.value || null;
//     const discountAmount = document.getElementById('discountRow')?.querySelector('td')?.textContent?.replace('-₹', '') || '0';

//     fetch('/placeorder', {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json'
//         },
//         body: JSON.stringify({
//             addressId: addressId,
//             paymentMethod: paymentMethod,
//             total: total,
//             subtotal: subtotal,
//             couponCode: couponCode,
//             couponAmount: parseFloat(discountAmount)
//         })
//     })
//     .then(response => response.json())
//     .then(data => {
//             if (data.success) {
//                 Swal.fire({
//                     icon: 'success',
//                     title: data.message,
//                     text: 'View My Orders',
//                     confirmButtonText: 'OK'
//                 }).then((result) => {
//                     if (result.isConfirmed) {
//                         window.location.href = '/profile';
//                     }
//                 });
//             } else {
//                 Swal.fire({
//                     icon: 'error',
//                     title: 'Order Placement Failed',
//                     text: data.message,
//                     confirmButtonText: 'OK'
//                 });
//             }
//         })
//         .catch(error => {
//             console.error('Error:', error);
//             Swal.fire({
//                 icon: 'error',
//                 title: 'Order Placement Failed',
//                 text: 'An error occurred while placing the order.',
//                 confirmButtonText: 'OK'
//             });
//         });
//     }
    

function placeOrder(addressId, paymentMethod, total, subtotal) {
    console.log(total, "totalleeeeeeeeee88888888888");
   
    const totalAmountElement = document.getElementById('totalAmount');
    const couponId = totalAmountElement.dataset.couponId || null;
    const discountAmount = totalAmountElement.dataset.discountAmount || '0';

    fetch('/placeorder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            addressId: addressId,
            paymentMethod: paymentMethod,
            total: total,
            subtotal: subtotal,
            couponId: couponId,
            couponAmount: parseFloat(discountAmount)
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: data.message,
                text: 'View My Orders',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                window.location.href = '/profile';
                }
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Order Placement Failed',
                text: data.message,
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Placement Failed',
            text: 'An error occurred while placing the order.',
            confirmButtonText: 'OK'
        });
    });
}




    function initiateRazorpayPayment(addressId, paymentMethod, total, subtotal) {
    // Get coupon information
    const couponCode = document.querySelector('input[name="coupon"]:checked')?.value || null;
    const discountAmount = document.getElementById('discountRow')?.querySelector('td')?.textContent?.replace('-₹', '') || '0';

    fetch('/placeorder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            addressId: addressId,
            paymentMethod: paymentMethod,
            total: total,
            subtotal: subtotal,
            couponCode: couponCode,
            couponAmount: parseFloat(discountAmount)
        })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const options = {
                    key: data.key_id ,
                    amount: data.amount,
                    currency: "INR",
                    name: "HPHONE",
                    description: data.description,
                    order_id: data.order_id,
                    handler: function (response) {
                        completeOrderAfterPayment(addressId, total, paymentMethod, "Success", subtotal);
                    },
                    prefill: {
                        contact: data.contact,
                        name: data.name,
                        email: data.email
                    },
                    notes: {
                        description: data.description
                    },
                    theme: {
                        color: "#F37254"
                    }
                };

                const razorpayObject = new Razorpay(options);
                razorpayObject.open();

                razorpayObject.on('payment.failed', function (response) {
                    console.error(response.error);
                    completeOrderAfterPayment(addressId, total, paymentMethod, "Failed", subtotal);
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Placement Failed',
                    text: data.message,
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Order Placement Failed',
                text: 'An error occurred while initiating the payment.',
                confirmButtonText: 'OK'
            });
        });
    }

    function completeOrderAfterPayment(addressId, total, paymentMethod, paymentStatus, subtotal) {
    // Get coupon information
    const couponCode = document.querySelector('input[name="coupon"]:checked')?.value || null;
    const discountAmount = document.getElementById('discountRow')?.querySelector('td')?.textContent?.replace('-₹', '') || '0';

    fetch(`/complete-order?addressId=${addressId}&total=${total}&paymentMethod=${paymentMethod}&paymentStatus=${paymentStatus}&subtotal=${subtotal}&couponCode=${couponCode}&couponAmount=${parseFloat(discountAmount)}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: data.message,
                text: 'View My Orders',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/profile';
                }
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Order Completion Failed',
                text: data.message,
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Completion Failed',
            text: 'An error occurred while completing the order.',
            confirmButtonText: 'OK'
        });
    });
}
</script>

<script>
    function confirmWalletBalance(addressId, paymentMethod, total, subtotal) {
        fetch(`/checkWalletBalance?totalAmount=${totalAmount}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log("Wallet balance is sufficient.");
                walletPlaceOrder(addressId, paymentMethod, total, subtotal);
            } else {
                Swal.fire({
                    icon: 'warning',
                    title: 'Insufficient Wallet Balance',
                    text: data.message,
                });
            }
        })
        .catch(error => {
            console.error('Error checking wallet balance:', error);
        });
    }

    function walletPlaceOrder(addressId, paymentMethod, total, subtotal) {
    // Get coupon information
    const couponCode = document.querySelector('input[name="coupon"]:checked')?.value || null;
    const discountAmount = document.getElementById('discountRow')?.querySelector('td')?.textContent?.replace('-₹', '') || '0';

    fetch('/walletOrder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            addressId: addressId,
            paymentMethod: paymentMethod,
            total: total,
            subtotal: subtotal,
            couponCode: couponCode,
            couponAmount: parseFloat(discountAmount)
        })
    })
        .then(response => response.json())
        .then(data => {
            console.log("Order response:", data);
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Order Placed Successfully',
                    text: 'View My Orders',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = "/account";
                    }
                });
            } else {
                Swal.fire({
                    icon: 'warning',
                    title: 'Order Placement Failed',
                    text: data.message
                });
            }
        })
        .catch(error => {
            console.error('Error placing order:', error);
        });
    }
</script>



    <script>
        document.getElementById("applyCouponBtn").addEventListener("click", applyCoupon);
        document.getElementById("removeCouponBtn").addEventListener("click", removeCoupon);
        
        function getSelectedCouponCode() {
            const selectedCoupon = document.querySelector('input[name="coupon"]:checked');
            return selectedCoupon ? selectedCoupon.value : null;
        }
        
        // async function applyCoupon() {
        //     const couponCode = getSelectedCouponCode();
        //     if (!couponCode) {
        //         Swal.fire({
        //             icon: 'error',
        //             title: 'No Coupon Selected',
        //             text: 'Please select a coupon to apply.',
        //         });
        //         return;
        //     }
        
        //     const totalAmountElement = document.getElementById('totalAmount');
        //     const totalAmount = parseFloat(totalAmountElement.textContent.replace('₹', ''));
        
        //     try {
        //         const response = await fetch('/apply-coupon', {
        //             method: 'POST',
        //             headers: {
        //                 'Content-Type': 'application/json',
        //             },
        //             body: JSON.stringify({ couponCode, totalAmount }),
        //         });
        
        //         const result = await response.json();
        
        //         if (response.ok && result.success) {
        //             Swal.fire({
        //                 icon: 'success',
        //                 title: 'Coupon Applied!',
        //                 text: `You saved ₹${result.discountAmount.toFixed(2)}. New total amount is ₹${result.newTotalAmount.toFixed(2)}.`,
        //             });
        
        //             totalAmountElement.textContent = `₹${result.newTotalAmount.toFixed(2)}`;
        
        //             let discountRow = document.getElementById('discountRow');
        //             if (!discountRow) {
        //                 const subtotalRow = document.getElementById('subtotalRow');
        //                 discountRow = document.createElement('tr');
        //                 discountRow.id = 'discountRow';
        
        //                 const discountTh = document.createElement('th');
        //                 discountTh.textContent = 'Discount';
        
        //                 const discountTd = document.createElement('td');
        //                 discountTd.colSpan = 2;
        //                 discountTd.textContent = `-₹${result.discountAmount.toFixed(2)}`;
        
        //                 discountRow.appendChild(discountTh);
        //                 discountRow.appendChild(discountTd);
        
        //                 subtotalRow.parentNode.insertBefore(discountRow, subtotalRow.nextSibling);
        //             } else {
        //                 discountRow.querySelector('td').textContent = `-₹${result.discountAmount.toFixed(2)}`;
        //             }
        
        //             const applyCouponModal = document.getElementById('applyCouponModal');
        //             const modalInstance = bootstrap.Modal.getInstance(applyCouponModal);
        //             if (modalInstance) {
        //                 modalInstance.hide();
        //             }
        
        //             document.getElementById("applyCouponBtn").disabled = true;
        
        //             const couponRadioButtons = document.querySelectorAll('input[name="coupon"]');
        //             couponRadioButtons.forEach(button => {
        //                 button.disabled = true;
        //             });
        
        //         } else {
        //             Swal.fire({
        //                 icon: 'error',
        //                 title: 'Error',
        //                 text: result.message,
        //             });
        //         }
        //     } catch (error) {
        //         console.error('Error applying coupon:', error);
        //     }
        // }


        async function applyCoupon() {
    const couponCode = getSelectedCouponCode();
    if (!couponCode) {
        Swal.fire({
            icon: 'error',
            title: 'No Coupon Selected',
            text: 'Please select a coupon to apply.',
        });
        return;
    }

    const totalAmountElement = document.getElementById('totalAmount');
    const totalAmount = parseFloat(totalAmountElement.textContent.replace('₹', ''));

    try {
        const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ couponCode, totalAmount }),
        });

        const result = await response.json();

        if (response.ok && result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Coupon Applied!',
                text: `You saved ₹${result.discountAmount.toFixed(2)}. New total amount is ₹${result.newTotalAmount.toFixed(2)}.`,
            });

            totalAmountElement.textContent = `₹${result.newTotalAmount.toFixed(2)}`;
            totalAmountElement.dataset.discountAmount = result.discountAmount.toFixed(2);
            totalAmountElement.dataset.couponId = result.couponId;

            let discountRow = document.getElementById('discountRow');
            if (!discountRow) {
                const subtotalRow = document.getElementById('subtotalRow');
                discountRow = document.createElement('tr');
                discountRow.id = 'discountRow';

                const discountTh = document.createElement('th');
                discountTh.textContent = 'Discount';

                const discountTd = document.createElement('td');
                discountTd.colSpan = 2;
                discountTd.textContent = `-₹${result.discountAmount.toFixed(2)}`;

                discountRow.appendChild(discountTh);
                discountRow.appendChild(discountTd);

                subtotalRow.parentNode.insertBefore(discountRow, subtotalRow.nextSibling);
            } else {
                discountRow.querySelector('td').textContent = `-₹${result.discountAmount.toFixed(2)}`;
            }

            const applyCouponModal = document.getElementById('applyCouponModal');
            const modalInstance = bootstrap.Modal.getInstance(applyCouponModal);
            if (modalInstance) {
                modalInstance.hide();
            }

            document.getElementById("applyCouponBtn").disabled = true;

            const couponRadioButtons = document.querySelectorAll('input[name="coupon"]');
            couponRadioButtons.forEach(button => {
                button.disabled = true;
            });

            updateCODAvailability();

        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message,
            });
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
    }
}

        
        // async function removeCoupon() {
        //     const totalAmountElement = document.getElementById('totalAmount');
        //     const originalTotalAmount = parseFloat(totalAmountElement.dataset.originalAmount);
        
        //     try {
        //         const response = await fetch('/remove-coupon', {
        //             method: 'POST',
        //             headers: {
        //                 'Content-Type': 'application/json',
        //             },
        //         });
        
        //         const result = await response.json();
        
        //         if (response.ok && result.success) {
        //             Swal.fire({
        //                 icon: 'success',
        //                 title: 'Coupon Removed',
        //                 text: 'The coupon has been removed successfully.',
        //             });
        
        //             totalAmountElement.textContent = `₹${originalTotalAmount.toFixed(2)}`;
        
        //             const discountRow = document.getElementById('discountRow');
        //             if (discountRow) {
        //                 discountRow.remove();
        //             }
        
        //             const couponRadioButtons = document.querySelectorAll('input[name="coupon"]');
        //             couponRadioButtons.forEach(button => {
        //                 button.disabled = false;
        //             });
        
        //             document.getElementById("applyCouponBtn").disabled = false;
        
        //             const applyCouponModal = document.getElementById('applyCouponModal');
        //             const modalInstance = bootstrap.Modal.getInstance(applyCouponModal);
        //             if (modalInstance) {
        //                 modalInstance.hide();
        //             }
        //         } else {
        //             Swal.fire({
        //                 icon: 'error',
        //                 title: 'Error',
        //                 text: result.message,
        //             });
        //         }
        //     } catch (error) {
        //         console.error('Error removing coupon:', error);
        //     }
        // }


        async function removeCoupon() {
  const totalAmountElement = document.getElementById('totalAmount');
  const appliedCouponId = totalAmountElement.dataset.couponId;

  // Check if a coupon is currently applied
  if (!appliedCouponId) {
    // No coupon applied, so just return without showing any message
    return;
  }

  try {
    const response = await fetch('/remove-coupon', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    const result = await response.json();

    if (response.ok && result.success) {
      Swal.fire({
        icon: 'success',
        title: 'Coupon Removed',
        text: result.message,
      });

      const originalAmount = totalAmountElement.dataset.originalAmount;
      totalAmountElement.textContent = `₹${parseFloat(originalAmount).toFixed(2)}`;

      delete totalAmountElement.dataset.couponId;
      delete totalAmountElement.dataset.discountAmount;

      const discountRow = document.getElementById('discountRow');
      if (discountRow) {
        discountRow.remove();
      }

      document.getElementById("applyCouponBtn").disabled = false;
      const couponRadioButtons = document.querySelectorAll('input[name="coupon"]');
      couponRadioButtons.forEach(button => {
        button.disabled = false;
        button.checked = false;
      });

      updateCODAvailability();

    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: result.message,
      });
    }
  } catch (error) {
    console.error('Error removing coupon:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred while removing the coupon.',
    });
  }
}
        
        
        </script>
        

<%- include('../partials/footercopy') %>
<%- include('../partials/footer') %>