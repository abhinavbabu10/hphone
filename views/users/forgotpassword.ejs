<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        .center-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .center-form {
            width: 100%;
            max-width: 400px;
            padding: 20px;
            background-color: #f7f7f7;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div class="container center-container">
        <div class="center-form">
            <h2>Forgot Password</h2>
            <% if (typeof errorMessage !== 'undefined') { %>
                <div class="alert alert-danger"><%= errorMessage %></div>
            <% } %>
            <% if (typeof successMessage !== 'undefined') { %>
                <div class="alert alert-success"><%= successMessage %></div>
            <% } %>
            <form id="forgot-password-form">
                <div class="form-group">
                    <label for="email">Email Address:</label>
                    <input type="email" id="email" name="email" class="form-control" required>
                </div>
                <button type="button" id="send-otp-button" class="btn btn-primary mt-3">Send OTP</button>
            </form>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.getElementById('send-otp-button').addEventListener('click', async (e) => {
            e.preventDefault();
            const emailInput = document.getElementById('email');
            const email = emailInput.value.trim();
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
            if (!emailRegex.test(email)) {
                Swal.fire('Error', 'Please enter a valid email address.', 'error');
                emailInput.focus();
                return;
            }
    
            try {
                const response = await fetch('/test-email', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email }),
                });
                const data = await response.json();
    
                if (data.exists) {
                    const sendOTP = async () => {
                        const otpResponse = await fetch('/forgot', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email }),
                        });
                        return otpResponse.text();
                    };
    
                    const displayOTPInput = async () => {
                        let timeLeft = 60;
                        const timerInterval = setInterval(() => {
                            document.getElementById('timer').innerText = `Time left: ${timeLeft} seconds`;
                            timeLeft--;
    
                            if (timeLeft < 0) {
                                clearInterval(timerInterval);
                                Swal.fire({
                                    title: 'Resend OTP',
                                    text: 'Do you want to resend OTP?',
                                    showCancelButton: true,
                                    confirmButtonText: 'Yes',
                                    cancelButtonText: 'No',
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        sendOTP().then(() => {
                                            displayOTPInput();
                                        });
                                    }
                                });
                            }
                        }, 1000);
    
                        Swal.fire({
                            title: 'Enter OTP',
                            input: 'text',
                            inputAttributes: { autocapitalize: 'off' },
                            html: '<span id="timer">Time left: 60 seconds</span>',
                            showCancelButton: true,
                            confirmButtonText: 'Submit',
                            showLoaderOnConfirm: true,
                            preConfirm: (enteredOtp) => {
                                clearInterval(timerInterval);
                                return fetch('/otp-verification', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({otp:enteredOtp}),
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            title: 'Enter New Password',
                                            html: `
                                                <input id="newPassword" class="swal2-input" placeholder="New Password" type="password">
                                                <input id="confirmPassword" class="swal2-input" placeholder="Confirm Password" type="password">
                                            `,
                                            showCancelButton: true,
                                            confirmButtonText: 'Submit',
                                            showLoaderOnConfirm: true,
                                            preConfirm: async () => {
                                                const newPassword = document.getElementById('newPassword').value;
                                                const confirmPassword = document.getElementById('confirmPassword').value;
    
                                                if (!validatePassword(newPassword)) {
                                                    Swal.showValidationMessage(
                                                        'Password must have at least one uppercase letter, one lowercase letter, one digit, one special symbol, and be at least 8 characters long.'
                                                    );
                                                    return false;
                                                }
    
                                                if (newPassword !== confirmPassword) {
                                                    Swal.showValidationMessage('Passwords do not match.');
                                                    return false;
                                                }
    
                                                const response = await fetch('/updatePassword', {
                                                    method: 'POST',
                                                    headers: { 'Content-Type': 'application/json' },
                                                    body: JSON.stringify({ email, newPassword }),
                                                });
                                                return response.json();
                                            },
                                            allowOutsideClick: () => !Swal.isLoading(),
                                        }).then(result => {
                                            if (result.value) {
                                                Swal.fire('Success', 'Your password has been updated successfully.', 'success')
                                                    .then(() => window.location.href = '/login');
                                            }
                                        });
                                    } else {
                                        Swal.showValidationMessage('Incorrect OTP. Please try again.');
                                    }
                                })
                                .catch(error => {
                                    console.error(error);
                                    Swal.fire('Error', 'Failed to verify OTP.', 'error');
                                });
                            },
                            allowOutsideClick: () => !Swal.isLoading(),
                        });
                    };
    
                    await sendOTP();
                    displayOTPInput();
                } else {
                    Swal.fire('Error', 'Email doesn\'t belong to any account. Please sign up.', 'error');
                }
            } catch (error) {
                console.error(error);
                Swal.fire('Error', 'Server error. Please try again later.', 'error');
            }
        });
    
        const validatePassword = (password) => {
            const capitalRegex = /[A-Z]/;
            const symbolRegex = /[!@#$%^&*(),.?":{}|<>]/;
            const numberRegex = /[0-9]/;
    
            return (
                capitalRegex.test(password) &&
                symbolRegex.test(password) &&
                numberRegex.test(password) &&
                password.length >= 8
            );
        };
    </script>
    
</body>
</html>
