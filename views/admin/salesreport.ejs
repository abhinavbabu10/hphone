<!-- <!DOCTYPE HTML>
<html lang="en"> -->

<head>
    <meta charset="utf-8">
    <title>HPHONE</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="/Adminassets/imgs/theme/airfavicon.jpeg">
    <!-- Template CSS -->
    <link href="/Adminassets/css/main.css" rel="stylesheet" type="text/css" />


    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .filter-buttons {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
        }
        .filter-buttons button {
            width: 150px;
        }
        .date-container {
            text-align: right;
            margin-bottom: 20px;
        }
        .download-buttons {
            display: flex;
            justify-content: flex-end;
            margin-top: 20px;
        }
        .download-buttons button {
            margin-left: 10px;
        }
        .table-container {
            display: flex;
        }
        .table-wrapper {
            flex-grow: 1;
        }
    </style>




</head>

<body>
    <div class="screen-overlay"></div>
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="index.html" class="brand-wrap">
                <img src="/Adminassets/imgs/theme/headphone.png" class="logo" alt="Evara Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize" > <i class="text-muted material-icons md-menu_open"></i> </button>
            </div>
           
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item">
                    <a class="menu-link" href="/admin/home"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <li class="">
                    <a class="menu-link" href="/admin/customer"><i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Customers</span>
                    </a>
                </li>
                <li class="">
                    <a class="menu-link" href="/admin/category"> <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Categories</span>
                    </a>
                </li>
                <li class="">
                    <a class="menu-link" href="/admin/product"> <i class="icon material-icons md-store"></i>
                        <span class="text">Products</span>
                    </a>
                </li>
                <li class= "">
                    <a class="menu-link" href="/admin/coupon"> <i class="icon material-icons md-star"></i>
                        <span class="text">Coupon Management</span>
                    </a>
                </li>
                <li class="">
                    <a class="menu-link" href="/admin/order"><i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Orders</span>
                    </a>
                    <li class= "menu-item active">
                        <a class="menu-link" href="/admin/salesreport"> <i class="icon material-icons md-store"></i>
                            <span class="text">SalesReport Management</span>
                        </a>
                    </li>
            </ul>
            <br>
            <br>
        </nav>
    </aside>



    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <!-- <form class="searchform">
                    <div class="input-group">
                        <input list="search_terms" type="text" class="form-control" placeholder="Search term">
                        <button class="btn btn-light bg" type="button"> <i class="material-icons md-search"></i></button>
                    </div>
                    <datalist id="search_terms">
                    </datalist>
                </form> -->
            </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i class="material-icons md-apps"></i> </button>
                <ul class="nav">
                    <!-- <li class="nav-item">
                        <a class="nav-link btn-icon" href="#">
                            <i class="material-icons md-notifications animation-shake"></i>
                            <span class="badge rounded-pill">3</span>
                        </a>
                    </li> -->
                    <!-- <li class="nav-item">
                        <a class="nav-link btn-icon darkmode" href="#"> <i class="material-icons md-nights_stay"></i> </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="requestfullscreen nav-link btn-icon"><i class="material-icons md-cast"></i></a>
                    </li> -->
                    <!-- <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownLanguage" aria-expanded="false"><i class="material-icons md-public"></i></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownLanguage">
                            <a class="dropdown-item text-brand" href="#"><img src="/Adminassets/imgs/theme/flag-us.png" alt="English">English</a>
                            <a class="dropdown-item" href="#"><img src="/Adminassets/imgs/theme/flag-fr.png" alt="Français">Français</a>
                            <a class="dropdown-item" href="#"><img src="/Adminassets/imgs/theme/flag-jp.png" alt="Français">日本語</a>
                            <a class="dropdown-item" href="#"><img src="/Adminassets/imgs/theme/flag-cn.png" alt="Français">中国人</a>
                        </div>
                    </li> -->
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="dropdownAccount" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <img class="img-xs rounded-circle" src="/Adminassets/imgs/people/avatar5.jpg" alt="User">
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="dropdownAccount">
                            <li><a class="dropdown-item" href="/admin/logout">Logout</a></li>
                            <!-- You can add more items here if needed -->
                        </ul>
                    </li>
                </ul>
            </div>
        </header>


        <section class="content-main">
            <div class="content-header">
                <h2 class="content-title">Sales Report</h2>
                <div>
                   
                </div>
            </div>
            <div class="card mb-4">
                <div class="card-body">
                    <div class="date-container">
                        <span><%= new Date().toLocaleDateString() %></span>
                    </div>
                    <div class="table-container">
                        <div class="filter-buttons" id="filterButtons">
                            <button class="btn btn-primary" data-filter="daily" id="dailyButton">Daily</button>
                            <button class="btn btn-primary" data-filter="weekly" id="weeklyButton" >Weekly</button>
                            <button class="btn btn-primary" data-filter="monthly" id="monthlyButton">Monthly</button>
                            <button class="btn btn-primary" data-filter="yearly" id="yearlyButton">Yearly</button>
                            <input type="date" id="startDate">
                            <input type="date" id="endDate">
                            <button class="btn btn-primary btn-sm" id="filterCustom">Filter</button>
                        </div>


                        <div class="table-wrapper">
                            <!-- <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Order Number</th>
                                            <th>Customer</th>
                                            <th>Products</th>
                                            <th>Quantity Sold</th>
                                            <th>Price</th>
                                            <th>Discount Amount</th>
                                            <th>Total Price</th>
                                        </tr>
                                    </thead>
                                    <tbody id="salesTableBody">
                                        <% orders.forEach(order => { %>
                                            <tr>
                                                <td><%= new Date(order.orderDate).toLocaleDateString() %></td>
                                                <td><%= order.oId %></td>
                                                <td><%= order.user.name %></td>
                                                <td>
                                                    <% order.items.forEach(item => { %>
                                                        <div class="product-item"><%= item.productId.name %></div>
                                                    <% }) %>
                                                </td>
                                                <td>
                                                    <% order.items.forEach(item => { %>
                                                        <div class="product-item"><%= item.quantity %></div>
                                                    <% }) %>
                                                </td>
                                                <td>
                                                    <% order.items.forEach(item => { %>
                                                        <div class="product-item"><%= item.productPrice.toFixed(2) %></div>
                                                    <% }) %>
                                                </td>
                                                <td><%= order.couponAmount.toFixed(2) %></td>
                                                <td class="text-end"><%= order.billTotal.toFixed(2) %></td>
                                            </tr>
                                        <% }) %>
                                    </tbody>
                                    <tfoot>
                                        <tr class="summary-row">
                                            <td colspan="6">Total Discount Amount:</td>
                                            <td id="total-discount"><%= totalDiscountAmount %></td>
                                            <td id="total-sales-amount" class="text-end"><%= totalSalesAmount %></td>
                                        </tr>
                                        <tr class="summary-row">
                                            <td colspan="8">Sales Count: <span id="sales-count"><%= totalSalesCount %></span></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div> -->

                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Customer</th>
                                            <th>Products</th>
                                            <th>Quantity Sold</th>
                                            <th>Price</th>
                                            <th>Discount Amount</th>
                                            <th>Total Price</th>
                                        </tr>
                                    </thead>
                                    <tbody id="salesTableBody">
                                        <% orders.forEach(order => { %>
                                            <tr>
                                                <td><%= new Date(order.orderDate).toLocaleDateString() %></td>
                                                <td><%= order.user.name %></td>
                                                <td>
                                                    <% order.items.forEach(item => { %>
                                                        <div class="product-item"><%= item.productId.name %></div>
                                                    <% }) %>
                                                </td>
                                                <td>
                                                    <% order.items.forEach(item => { %>
                                                        <div class="product-item"><%= item.quantity %></div>
                                                    <% }) %>
                                                </td>
                                                <td>
                                                    <% order.items.forEach(item => { %>
                                                        <div class="product-item"><%= item.productPrice.toFixed(2) %></div>
                                                    <% }) %>
                                                </td>
                                                <td><%= order.couponAmount.toFixed(2) %></td>
                                                <td class="text-end"><%= order.billTotal.toFixed(2) %></td>
                                            </tr>
                                        <% }) %>
                                    </tbody>
                                    <tfoot>
                                        <tr class="summary-row">
                                            <td colspan="5">Total Discount Amount:</td>
                                            <td id="total-discount"><%= totalDiscountAmount %></td>
                                            <td id="total-sales-amount" class="text-end"><%= totalSalesAmount %></td>
                                        </tr>
                                        <tr class="summary-row">
                                            <td colspan="7">Sales Count: <span id="sales-count"><%= totalSalesCount %></span></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                            



                            <div class="download-buttons">
                                <button class="btn btn-success" onclick="downloadExcel()">Download Excel</button>
                                <button class="btn btn-danger" id ='downloadPDFButton'>Download PDF</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
  
        
     </section>

     
     <div class="d-flex justify-content-center">
        <div class="pagination-area mt-15 mb-50">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-start">
                    <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
                    </li>
                    <% } %>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                    </li>
                    <% } %>
                    <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
                    </li>
                    <% } %>
                </ul>
            </nav>
        </div>


    </main>






   <script src="/Adminassets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/Adminassets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="/Adminassets/js/vendors/select2.min.js"></script>
    <script src="/Adminassets/js/vendors/perfect-scrollbar.js"></script>
    <script src="/Adminassets/js/vendors/jquery.fullscreen.min.js"></script>
    <script src="/Adminassets/js/vendors/chart.js"></script>
    <!-- Main Script -->
    <script src="/Adminassets/js/main.js" type="text/javascript"></script>
    <script src="/Adminassets/js/custom-chart.js" type="text/javascript"></script>

  
<!--     
    <script>
        let selectedFilterType = 'all';
    
        function createOrderRow(order) {
            const row = document.createElement('tr');
    
            const dateCell = document.createElement('td');
            dateCell.textContent = new Date(order.orderDate).toLocaleDateString();
            row.appendChild(dateCell);
    
            const orderNumberCell = document.createElement('td');
            orderNumberCell.textContent = order.oId;
            row.appendChild(orderNumberCell);
    
            const customerCell = document.createElement('td');
            customerCell.textContent = order.user.name;
            row.appendChild(customerCell);
    
            const productsCell = document.createElement('td');
            order.items.forEach(item => {
                const productItem = document.createElement('div');
                productItem.className = 'product-item';
                productItem.textContent = item.productId.name;
                productsCell.appendChild(productItem);
            });
            row.appendChild(productsCell);
    
            const quantityCell = document.createElement('td');
            order.items.forEach(item => {
                const quantityItem = document.createElement('div');
                quantityItem.className = 'product-item';
                quantityItem.textContent = item.quantity;
                quantityCell.appendChild(quantityItem);
            });
            row.appendChild(quantityCell);
    
            const priceCell = document.createElement('td');
            order.items.forEach(item => {
                const priceItem = document.createElement('div');
                priceItem.className = 'product-item';
                priceItem.textContent = item.productPrice.toFixed(2);
                priceCell.appendChild(priceItem);
            });
            row.appendChild(priceCell);
    
            const discountCell = document.createElement('td');
            discountCell.textContent = order.couponAmount.toFixed(2);
            row.appendChild(discountCell);
    
            const totalPriceCell = document.createElement('td');
            totalPriceCell.className = 'text-end';
            totalPriceCell.textContent = order.billTotal.toFixed(2);
            row.appendChild(totalPriceCell);
    
            return row;
        }
    
        function updateSalesReport(data) {
            const salesTableBody = document.getElementById('salesTableBody');
            salesTableBody.innerHTML = '';
    
            let totalDiscountAmount = 0;
            let totalSalesAmount = 0;
            let totalSalesCount = 0;
    
            data.orders.forEach(order => {
                const orderRow = createOrderRow(order);
                salesTableBody.appendChild(orderRow);
    
                totalDiscountAmount += order.couponAmount;
                totalSalesAmount += order.billTotal;
                totalSalesCount += 1;
            });
    
            document.getElementById('total-discount').textContent = totalDiscountAmount.toFixed(2);
            document.getElementById('total-sales-amount').textContent = totalSalesAmount.toFixed(2);
            document.getElementById('sales-count').textContent = totalSalesCount;
        }
    
        document.addEventListener('DOMContentLoaded', () => {
            function filterSalesReport(filterType, startDate, endDate) {
                selectedFilterType = filterType; // Update the selected filter type
    
                const filterParams = {
                    filter: filterType,
                    startDate: startDate || null,
                    endDate: endDate || null
                };
    
                console.log('Sending filterParams:', filterParams);
    
                fetch('/admin/filterorder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(filterParams)
                })
                .then(response => response.json())
                .then(data => {
                    updateSalesReport(data);
                })
                .catch(error => console.error('Error:', error));
            }
    
            const filterCustom = document.getElementById('filterCustom');
            if (filterCustom) {
                filterCustom.addEventListener('click', () => {
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;
                    filterSalesReport('custom', startDate, endDate);
                });
            }
    
            const buttons = {
                'dailyButton': 'daily',
                'weeklyButton': 'weekly',
                'monthlyButton': 'monthly',
                'yearlyButton': 'yearly'
            };
            Object.entries(buttons).forEach(([id, filterType]) => {
                const button = document.getElementById(id);
                if (button) {
                    button.addEventListener('click', () => filterSalesReport(filterType));
                }
            });
    
            const downloadPDFButton = document.getElementById('downloadPDFButton');
            if (downloadPDFButton) {
                downloadPDFButton.onclick = () => {
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;
                    const filterParams = {
                        filter: selectedFilterType,
                        startDate: startDate || null,
                        endDate: endDate || null
                    };
                    downloadPDF(filterParams);
                };
            }
        });
    
        function downloadPDF(filterParams) {
            console.log('filterParams for PDF:', filterParams);
    
            if (!filterParams || Object.keys(filterParams).length === 0) {
                console.error('Error: filterParams is empty');
                return;
            }
    
            fetch('/admin/generate-pdf', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(filterParams)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.blob();
            })
            .then(blob => {
                let url = window.URL.createObjectURL(blob);
                let a = document.createElement('a');
                a.href = url;
                a.download = 'sales_report.pdf';
                document.body.appendChild(a);
                a.click();
                a.remove();
            })
            .catch(error => console.error('Error generating PDF:', error));
        }
    </script> -->
    



    <script>
        let selectedFilterType = 'all';
    
        function createOrderRow(order) {
            const row = document.createElement('tr');
    
            const dateCell = document.createElement('td');
            dateCell.textContent = new Date(order.orderDate).toLocaleDateString();
            row.appendChild(dateCell);
    
            const customerCell = document.createElement('td');
            customerCell.textContent = order.user.name;
            row.appendChild(customerCell);
    
            const productsCell = document.createElement('td');
            order.items.forEach(item => {
                const productItem = document.createElement('div');
                productItem.className = 'product-item';
                productItem.textContent = item.productId.name;
                productsCell.appendChild(productItem);
            });
            row.appendChild(productsCell);
    
            const quantityCell = document.createElement('td');
            order.items.forEach(item => {
                const quantityItem = document.createElement('div');
                quantityItem.className = 'product-item';
                quantityItem.textContent = item.quantity;
                quantityCell.appendChild(quantityItem);
            });
            row.appendChild(quantityCell);
    
            const priceCell = document.createElement('td');
            order.items.forEach(item => {
                const priceItem = document.createElement('div');
                priceItem.className = 'product-item';
                priceItem.textContent = item.productPrice.toFixed(2);
                priceCell.appendChild(priceItem);
            });
            row.appendChild(priceCell);
    
            const discountCell = document.createElement('td');
            discountCell.textContent = order.couponAmount.toFixed(2);
            row.appendChild(discountCell);
    
            const totalPriceCell = document.createElement('td');
            totalPriceCell.className = 'text-end';
            totalPriceCell.textContent = order.billTotal.toFixed(2);
            row.appendChild(totalPriceCell);
    
            return row;
        }
    
        function updateSalesReport(data) {
            const salesTableBody = document.getElementById('salesTableBody');
            salesTableBody.innerHTML = '';
    
            let totalDiscountAmount = 0;
            let totalSalesAmount = 0;
            let totalSalesCount = 0;
    
            data.orders.forEach(order => {
                const orderRow = createOrderRow(order);
                salesTableBody.appendChild(orderRow);
    
                totalDiscountAmount += order.couponAmount;
                totalSalesAmount += order.billTotal;
                totalSalesCount += 1;
            });
    
            document.getElementById('total-discount').textContent = totalDiscountAmount.toFixed(2);
            document.getElementById('total-sales-amount').textContent = totalSalesAmount.toFixed(2);
            document.getElementById('sales-count').textContent = totalSalesCount;
        }
    
        document.addEventListener('DOMContentLoaded', () => {
            function filterSalesReport(filterType, startDate, endDate) {
                selectedFilterType = filterType; // Update the selected filter type
    
                const filterParams = {
                    filter: filterType,
                    startDate: startDate || null,
                    endDate: endDate || null
                };
    
                console.log('Sending filterParams:', filterParams);
    
                fetch('/admin/filterorder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(filterParams)
                })
                .then(response => response.json())
                .then(data => {
                    updateSalesReport(data);
                })
                .catch(error => console.error('Error:', error));
            }
    
            const filterCustom = document.getElementById('filterCustom');
            if (filterCustom) {
                filterCustom.addEventListener('click', () => {
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;
                    filterSalesReport('custom', startDate, endDate);
                });
            }
    
            const buttons = {
                'dailyButton': 'daily',
                'weeklyButton': 'weekly',
                'monthlyButton': 'monthly',
                'yearlyButton': 'yearly'
            };
            Object.entries(buttons).forEach(([id, filterType]) => {
                const button = document.getElementById(id);
                if (button) {
                    button.addEventListener('click', () => filterSalesReport(filterType));
                }
            });
    
            const downloadPDFButton = document.getElementById('downloadPDFButton');
            if (downloadPDFButton) {
                downloadPDFButton.onclick = () => {
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;
                    const filterParams = {
                        filter: selectedFilterType,
                        startDate: startDate || null,
                        endDate: endDate || null
                    };
                    downloadPDF(filterParams);
                };
            }
        });
    
        function downloadPDF(filterParams) {
            console.log('filterParams for PDF:', filterParams);
    
            if (!filterParams || Object.keys(filterParams).length === 0) {
                console.error('Error: filterParams is empty');
                return;
            }
    
            fetch('/admin/generate-pdf', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(filterParams)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.blob();
            })
            .then(blob => {
                let url = window.URL.createObjectURL(blob);
                let a = document.createElement('a');
                a.href = url;
                a.download = 'sales_report.pdf';
                document.body.appendChild(a);
                a.click();
                a.remove();
            })
            .catch(error => console.error('Error generating PDF:', error));
        }
    </script>
    

    
   

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.4/xlsx.full.min.js"></script>
    <script>
        function downloadExcel() {
            const table = document.querySelector('.table-responsive table');
            const ws = XLSX.utils.table_to_sheet(table);
    
   
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'SalesReport');
    
       
            const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
            const blob = new Blob([wbout], { type: 'application/octet-stream' });
            const url = URL.createObjectURL(blob);
    
    
            const a = document.createElement('a');
            a.href = url;
            a.download = 'sales_report.xlsx';
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 0);
        }
    </script>
    
    

</body>
</html>